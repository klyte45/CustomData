<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cd_cimNamingTab_title" xml:space="preserve">
    <value>Cims' Naming</value>
  </data>
  <data name="cd_districtTab_cityColor" xml:space="preserve">
    <value>City color</value>
  </data>
  <data name="cd_districtTab_districtColor" xml:space="preserve">
    <value>District color</value>
  </data>
  <data name="cd_districtTab_districtToChange" xml:space="preserve">
    <value>Select district</value>
  </data>
  <data name="cd_districtTab_postalCodeDigits" xml:space="preserve">
    <value>Postal code digits (000 to 999)</value>
  </data>
  <data name="cd_districtTab_postalCodeDigitsFallback" xml:space="preserve">
    <value>City postal code</value>
  </data>
  <data name="cd_districtTab_roadFormattingFile" xml:space="preserve">
    <value>Road name pattern file</value>
  </data>
  <data name="cd_districtTab_roadFormattingFileDefault" xml:space="preserve">
    <value>City default road pattern file</value>
  </data>
  <data name="cd_districtTab_roadNamingsFile" xml:space="preserve">
    <value>Road naming file</value>
  </data>
  <data name="cd_districtTab_roadNamingsFileDefault" xml:space="preserve">
    <value>City default road naming file</value>
  </data>
  <data name="cd_districtTab_title" xml:space="preserve">
    <value>District data</value>
  </data>
  <data name="cd_neighborTab_actions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="cd_neighborTab_azimuthDirectionShort" xml:space="preserve">
    <value>Azimuth (°)</value>
  </data>
  <data name="cd_neighborTab_cityName" xml:space="preserve">
    <value>City Name</value>
  </data>
  <data name="cd_neighborTab_neighborNamesFile" xml:space="preserve">
    <value>Default city names file</value>
  </data>
  <data name="cd_neighborTab_title" xml:space="preserve">
    <value>Neighbors</value>
  </data>
  <data name="root_modDescription" xml:space="preserve">
    <value>Data storage to extra stuff for game Intances</value>
  </data>
  <data name="cd_cimNamingTab_surnamesTitle" xml:space="preserve">
    <value>Surnames file</value>
  </data>
  <data name="cd_cimNamingTab_femaleNamesTitle" xml:space="preserve">
    <value>Female given names file</value>
  </data>
  <data name="cd_cimNamingTab_maleNamesTitle" xml:space="preserve">
    <value>Male given names files</value>
  </data>
  <data name="cd_cimNamingTab_surnameBeforeMainname" xml:space="preserve">
    <value>Surnames before given names
(only when using custom surnames)</value>
  </data>
  <data name="cd_areasNamingTab_simplePatternNote" xml:space="preserve">
    <value>&lt;i&gt;&lt;color=#FFFF00&gt;NOTE:&lt;/color&gt; Simple pattern files are like the name files, but requires to have a placeholder "&lt;color=#00ff00&gt;{0}&lt;/color&gt;" to be replaced by the generated name.&lt;/i&gt;</value>
  </data>
  <data name="cd_areasNamingTab_title" xml:space="preserve">
    <value>Areas' Naming</value>
  </data>
  <data name="cd_areasNamingTab_simplePatternFile" xml:space="preserve">
    <value>Simple patterns file</value>
  </data>
  <data name="cd_areasNamingTab_namesFile" xml:space="preserve">
    <value>Names file</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Parks_CityPark" xml:space="preserve">
    <value>&lt;color=#00FF00&gt;City Park Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Airports" xml:space="preserve">
    <value>&lt;color=#00FFFF&gt;Airport Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Campus_Liberal" xml:space="preserve">
    <value>&lt;color=#0044FF&gt;Liberal Arts College&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Campus_Regular" xml:space="preserve">
    <value>&lt;color=#0044FF&gt;University&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Campus_Trade" xml:space="preserve">
    <value>&lt;color=#0044FF&gt;Trade School&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Industry_Farming" xml:space="preserve">
    <value>&lt;color=#FFFF00&gt;Farming Industry Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Industry_Forest" xml:space="preserve">
    <value>&lt;color=#FFFF00&gt;Forest Industry Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Industry_Mining" xml:space="preserve">
    <value>&lt;color=#FFFF00&gt;Mining Inudstry Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Industry_Oil" xml:space="preserve">
    <value>&lt;color=#FFFF00&gt;Oil Industry Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Parks_Amusement" xml:space="preserve">
    <value>&lt;color=#00FF00&gt;Amusement Parks&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Parks_Natural" xml:space="preserve">
    <value>&lt;color=#00FF00&gt;Natural Reserves&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Parks_Zoo" xml:space="preserve">
    <value>&lt;color=#00FF00&gt;Zoo Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Pedestrian" xml:space="preserve">
    <value>&lt;color=#888888&gt;Pedestrian Areas&lt;/color&gt;</value>
  </data>
  <data name="cd_Enum__DistrictAreaType_Regular" xml:space="preserve">
    <value>Regular districts</value>
  </data>
  <data name="cd_addressingSettingsTab_title" xml:space="preserve">
    <value>Addressing Settings</value>
  </data>
  <data name="cd_addressingSettingsTab_addressesLines" xml:space="preserve">    <value>Addresses lines</value>  </data>
  <data name="cd_addressingSettingsTab_addressLine1" xml:space="preserve">    <value>Address line 1</value>  </data>
  <data name="cd_addressingSettingsTab_addressLine2" xml:space="preserve">    <value>Address line 2</value>  </data>
  <data name="cd_addressingSettingsTab_addressLine3" xml:space="preserve">    <value>Address line 3</value>  </data>
  <data name="cd_addressingSettingsTab_citywidePostalCode" xml:space="preserve">    <value>City postal code digits</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeFormat" xml:space="preserve">    <value>Postal code format</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeSettings" xml:space="preserve">    <value>Postal code settings</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_A" xml:space="preserve">    <value>1st digit of name seed id of the segment (0-6)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_B" xml:space="preserve">    <value>2nd digit of name seed id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_C" xml:space="preserve">    <value>3rd digit of name seed id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_D" xml:space="preserve">    <value>4th digit of name seed id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_E" xml:space="preserve">    <value>5th digit of name seed id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_F" xml:space="preserve">    <value>1st digit of segment id of the segment (0-3)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_G" xml:space="preserve">    <value>2nd digit of segment id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_H" xml:space="preserve">    <value>3rd digit of segment id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_I" xml:space="preserve">    <value>4th digit of segment id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_J" xml:space="preserve">    <value>5th digit of segment id of the segment (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_K" xml:space="preserve">    <value>Hundreds digit from citywide postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_L" xml:space="preserve">    <value>Tens digit from citywide postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_M" xml:space="preserve">    <value>Units digit from citywide postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_N" xml:space="preserve">    <value>Hundreds digit from district postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_O" xml:space="preserve">    <value>Tens digit from district postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_P" xml:space="preserve">    <value>Units digit from district postal code</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_X" xml:space="preserve">    <value>Map tile coordinate in East-West axis (0-8)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_x_" xml:space="preserve">    <value>Tenths of tile coordinate in East-West axis (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_Y" xml:space="preserve">    <value>Map tile coordinate in North-South axis (0-8)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeDescription_y_" xml:space="preserve">    <value>Tenths of tile coordinate in North-South axis (0-9)</value>  </data>
  <data name="cd_addressingSettingsTab_postalCodeHelpHeaderText" xml:space="preserve">    <value>There are all letters that have a special value in the postal code formatting.
Use backslash &lt;color=#FFFF00&gt;\&lt;/color&gt; to escape a character and show it literally.
Unlisted characters will always be shown literally.</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_A" xml:space="preserve">    <value>Street name</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_B" xml:space="preserve">    <value>Number (distance from start of street)</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_C" xml:space="preserve">    <value>City Name</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_D" xml:space="preserve">    <value>District</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_E" xml:space="preserve">    <value>Postal Code</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineDescription_F" xml:space="preserve">    <value>Special Area name (Park, industry, etc...)</value>  </data>
  <data name="cd_addressingSettingsTab_addressLineHelpHeaderText" xml:space="preserve">    <value>There are all letters that represents a special meaning in addresses lines.
Use backslash &lt;color=#FFFF00&gt;\&lt;/color&gt; to escape a character and show it literally, or put the literal content &lt;color=#FFFF00&gt;"between double quotes"&lt;/color&gt;.
The text written between brackets &lt;color=#FFFF00&gt;[ ]&lt;/color&gt; won't be shown if there's no district.
The text written between parentheses &lt;color=#FFFF00&gt;( )&lt;/color&gt; won't be shown if there's no special area.</value>  </data>

</root>